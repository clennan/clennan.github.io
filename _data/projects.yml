- name: Image Deduplicator
  link: github.com/idealo/imagededup
  github: idealo/imagededup
  description: | # this will include new lines to allow paragraphs
    This package includes various hashing algorithms that are particularly good at finding exact duplicates, and Convolutional Neural Networks which perform well for finding near duplicates. 
    We also provide an evaluation framework that allows to measure deduplication quality for a given dataset.


- name: Image Quality Assessment
  link: github.com/idealo/image-quality-assessment
  github: idealo/image-quality-assessment
  description: | # this will include new lines to allow paragraphs
    The goal was to automate the gallery service for hotel offers on [hotel.idealo.de](https://hotel.idealo.de). We annotated our own hotel dataset and trained CNNs to predict the aesthetic and technical quality of hotel images. The model was put into production and we scored 300+ million images.

    I wrote about this project in more detail on [Medium](https://medium.com/idealo-tech-blog/using-deep-learning-to-automatically-rank-millions-of-hotel-images-c7e2d2e5cae2) and the [NVIDIA Developer Blog](https://devblogs.nvidia.com/deep-learning-hotel-aesthetics-photos/).


- name: Image-ATM
  link: github.com/idealo/imageatm
  github: idealo/imageatm
  description: | # this will include new lines to allow paragraphs
    Image-ATM (Automated Tagging Machine) allows anyone to train an image classification CNN with one line of code. The package includes data preparation, training, and evaluation. It also automates training in the cloud on GPU instances and comes with a command line client.

    We used Terraform in the background to handle cloud setup and destruction. For further details and examples see the project [documentation](https://idealo.github.io/imageatm/).


- name: Image captioning
  link: github.com/clennan/image-captioning
  github: clennan/image-captioning
  description: |
   For  my  master thesis I implemented an image captioning neural network ([paper](https://arxiv.org/abs/1502.03044)) and visualized the attention maps with Deep Taylor Decomposition (DTD) to gain a better understanding of the inner workings of the system.
   The encoder (pre-trained CNN), decoder (RNN with LSTM cells), attention mechanism, and DTD modules were built with TensorFlow.


- name: CNN-exposed
  link: github.com/idealo/cnn-exposed
  github: idealo/cnn-exposed
  description: | # this will include new lines to allow paragraphs
    Collection of various CNN attribution and visualization methods that we used across projects at idealo.de. We provide Colab notebooks with code examples for all methods.
